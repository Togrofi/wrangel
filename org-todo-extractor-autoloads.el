;;; org-todo-extractor-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from org-todo-extractor.el

(autoload 'org-todo-extractor-from-buffer "org-todo-extractor" "\
Extract todos from BUFFER (or current buffer) using gptel.el.
Sends the buffer content to an LLM to extract and categorize org todos,
then appends them to appropriate org files.

(fn &optional BUFFER)" t)
(autoload 'org-todo-extractor-from-region "org-todo-extractor" "\
Extract todos from region between START and END using gptel.el.

(fn START END)" t)
(autoload 'org-todo-extractor-from-text "org-todo-extractor" "\
Extract todos from TEXT string using gptel.el.

(fn TEXT)" t)
(autoload 'org-todo-extractor-ideas-from-buffer "org-todo-extractor" "\
Extract atomic ideas from BUFFER (or current buffer) using gptel.el.
Sends the buffer content to an LLM to extract discrete ideas,
then appends them to category-specific org files.

(fn &optional BUFFER)" t)
(autoload 'org-todo-extractor-ideas-from-region "org-todo-extractor" "\
Extract atomic ideas from region between START and END using gptel.el.

(fn START END)" t)
(autoload 'org-todo-extractor-ideas-from-text "org-todo-extractor" "\
Extract atomic ideas from TEXT string using gptel.el.

(fn TEXT)" t)
(autoload 'org-todo-extractor-tldr-from-buffer "org-todo-extractor" "\
Create TLDR summary from BUFFER (or current buffer) using gptel.el.
Sends the buffer content to an LLM to create a concise summary,
then appends it to tldr.org file.

(fn &optional BUFFER)" t)
(autoload 'org-todo-extractor-tldr-from-region "org-todo-extractor" "\
Create TLDR summary from region between START and END using gptel.el.

(fn START END)" t)
(autoload 'org-todo-extractor-tldr-from-text "org-todo-extractor" "\
Create TLDR summary from TEXT string using gptel.el.

(fn TEXT)" t)
(register-definition-prefixes "org-todo-extractor" '("org-todo-extractor-"))


;;; End of scraped data

(provide 'org-todo-extractor-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; org-todo-extractor-autoloads.el ends here
